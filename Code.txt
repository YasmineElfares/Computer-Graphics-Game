#include "TextureBuilder.h"
#include "Model_3DS.h"
#include "GLTexture.h"
#include <glut.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <windows.h>
#include <mmsystem.h>


#define DEG2RAD(a) (a * 0.0174532925)

int WIDTH = 1280;
int HEIGHT = 720;

GLuint tex;
char title[] = "3D Model Loader Sample";

// 3D Projection Options
GLdouble fovy = 45.0;
GLdouble aspectRatio = (GLdouble)WIDTH / (GLdouble)HEIGHT;
GLdouble zNear = 0.1;
GLdouble zFar = 100;

float collectiblesRot = 0;

bool collide = false;
bool collectable1 = true;
bool collectable2 = true;
bool collectable3 = true;
bool collectable4 = true;
bool collectable5 = true;
bool collectable6 = true;

bool collectable7 = true;
bool collectable8 = true;
bool collectable9 = true;
bool collectable10 = true;
bool collectable11 = true;
bool collectable12 = true;

bool power1 = true;
bool power2 = true;
bool power3 = true;
bool power4 = true;

bool dont = true;



bool obstacleSea1 = true;
bool obstacleSea2 = true;
bool obstacleSea3 = true;
bool obstacleLand1 = true;
bool obstacleLand2 = true;
bool obstacleLand3 = true;


//Global Variables
float movementX = 0;
float playerX = 0;
float playerZ = 0;
float player2Z = 80;
float collectiblesX = 0;
float collectiblesZ = 0;
float powerUpX = 0;
float powerUpZ = 0;
bool level1End = 0;
bool leftBorder = false;
bool rightBorder = false;


int lives = 3;
boolean lost = false;
boolean won = 1;
int score = 0;
float lightIntensity = 1;
float lightHeight = 5;
float sunHeight = 10;
float moonHeight = 10;

boolean cameraNormal = true;
int done = 0;

//Method Signatures
void drawCollectibles(float collectiblesX, float collectiblesZ);
void drawPowerUp(float powerUpX, float powerUpZ);
void timer(int);


bool Collision(float XMin, float XMax, float ZMin, float ZMax) {
	if (playerZ < 79) {
		if (playerX >= XMin && playerX <= XMax && playerZ <= ZMax && playerZ >= ZMin) {
			return true;
		}
		else {
			return false;

		}
	}

	else {

		if (playerX >= XMin && playerX <= XMax && player2Z <= ZMax && player2Z >= ZMin) {
			return true;
		}
		else {
			return false;

		}
	}
}




class Vector3f {
public:
	float x, y, z;

	Vector3f(float _x = 0.0f, float _y = 0.0f, float _z = 0.0f) {
		x = _x;
		y = _y;
		z = _z;
	}

	Vector3f operator+(Vector3f& v) {
		return Vector3f(x + v.x, y + v.y, z + v.z);
	}

	Vector3f operator-(Vector3f& v) {
		return Vector3f(x - v.x, y - v.y, z - v.z);
	}

	Vector3f operator*(float n) {
		return Vector3f(x * n, y * n, z * n);
	}

	Vector3f operator/(float n) {
		return Vector3f(x / n, y / n, z / n);
	}

	Vector3f unit()
	{
		return *this / sqrt(x * x + y * y + z * z);
	}

	Vector3f cross(Vector3f v) {
		return Vector3f(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
	}
};

class Camera {
public:
	Vector3f eye, center, up;


	Camera(float eyeX = -0.0612222, float eyeY = 3.19303, float eyeZ = 6,
		float centerX = -0.0626442, float centerY = 2.89881, float centerZ = 4,
		float upX = -0.00043782, float upY = 0.95574, float upZ = 0) {

		eye = Vector3f(eyeX, eyeY, eyeZ);
		center = Vector3f(centerX, centerY, centerZ);
		up = Vector3f(upX, upY, upZ);
	}

	void moveX(float d) {
		Vector3f right = up.cross(center - eye).unit();
		eye = eye + right * d;
		center = center + right * d;
	}

	void moveY(float d) {
		eye = eye + up.unit() * d;
		center = center + up.unit() * d;
	}

	void moveZ(float d) {
		Vector3f view = (center - eye).unit();
		eye = eye + view * d;
		center = center + view * d;
	}

	void moveWithPlayer(float d) {
		Vector3f view = (center - eye).unit();
		eye = eye + view * d;
		center = center + view * d;
	}

	void rotateX(float a) {
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(a)) + up * sin(DEG2RAD(a));
		up = view.cross(right);
		center = eye + view;
	}

	void rotateY(float a) {
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(a)) + right * sin(DEG2RAD(a));
		right = view.cross(up);
		center = eye + view;
	}

	void look() {

		eye.z -= 0.2;
		center.z += 0.2;

		gluLookAt(
			eye.x, eye.y, -eye.z,
			center.x, center.y, center.z,
			up.x, up.y, up.z
		);

	}

	void lookFront() {
		eye.x = 0.505118;
		eye.y = 0.369718;
		eye.z = 1.86014;
		center.x = 0.506983;
		center.y = 0.291827;
		center.z = 0.869653;
		up.x = 0.00111232;
		up.y = 0.990287;
		up.z = 0.139036;
		gluLookAt(
			eye.x, eye.y, eye.z,
			center.x, center.y, center.z,
			up.x, up.y, up.z
		);
	}
	void lookTop() {
		eye.x = 0.478045;
		eye.y = 1.48059;
		eye.z = 0.605149;
		center.x = 0.47784;
		center.y = 0.490056;
		center.z = 0.467883;
		up.x = -0.00147384;
		up.y = 0.137266;
		up.z = -0.990533;
		gluLookAt(
			eye.x, eye.y, eye.z,
			center.x, center.y, center.z,
			up.x, up.y, up.z
		);
	}
	void lookSide() {
		eye.x = 1.74849;
		eye.y = 0.37731;
		eye.z = 0.166972;
		center.x = 0.788519;
		center.y = 0.295665;
		center.z = 0.434924;
		up.x = -0.152609;
		up.y = 0.954588;
		up.z = -0.255876;

		gluLookAt(
			eye.x, eye.y, eye.z,
			center.x, center.y, center.z,
			up.x, up.y, up.z
		);
	}

};

Camera camera;



class Camera1Person {
public:
	Vector3f eye, center, up;
	float  eyeZ1st, centerZ1st;


	Camera1Person(float eyeX = -0.0612222, float eyeY = 3.19303, float eyeZ = 6,
		float centerX = -0.0626442, float centerY = 2.89881, float centerZ = 4,
		float upX = -0.00043782, float upY = 0.95574, float upZ = 0) {

		eye = Vector3f(eyeX, eyeY, eyeZ);
		center = Vector3f(centerX, centerY, centerZ);
		up = Vector3f(upX, upY, upZ);
		eyeZ1st = -0.24;
		centerZ1st = 4;
	}



	void look() {

		eye.z -= 0.2;
		center.z += 0.2;
		eyeZ1st -= 0.2;
		centerZ1st += 0.2;

		if (level1End) {
			eyeZ1st -= 0.017;
			centerZ1st += 0.017;
		}

		if (cameraNormal) {
			gluLookAt(
				eye.x, eye.y, -eye.z,
				center.x, center.y, center.z,
				up.x, up.y, up.z
			);
		}
		else {
			gluLookAt(
				eye.x, eye.y, -eyeZ1st,
				center.x, center.y, centerZ1st,
				up.x, up.y, up.z
			);
		}



	}


};

Camera1Person camera1Person;


void setupCamera() {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 640 / 480, 0.001, 100);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	camera1Person.look();
}

int cameraZoom = 0;

// Model Variables
Model_3DS model_house;
Model_3DS model_brick;
Model_3DS model_ball;
Model_3DS model_ariel;
Model_3DS model_shark;
Model_3DS model_treasure;
Model_3DS model_fish;
Model_3DS model_apple;
Model_3DS model_blackWidow;
Model_3DS model_boat;

// Textures
GLTexture tex_ground;
GLTexture tex_ground2;

//=======================================================================
// Lighting Configuration Function
//=======================================================================
void InitLightSource()
{
	// Enable Lighting for this OpenGL Program
	glEnable(GL_LIGHTING);

	// Enable Light Source number 0
	// OpengL has 8 light sources
	glEnable(GL_LIGHT0);

	// Define Light source 0 ambient light
	GLfloat ambient[] = { 0.1f, 0.1f, 0.1, 1.0f };
	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);

	// Define Light source 0 diffuse light
	GLfloat diffuse[] = { 0.5f, 0.5f, 0.5f, 1.0f };
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);

	// Define Light source 0 Specular light
	GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	glLightfv(GL_LIGHT0, GL_SPECULAR, specular);

	// Finally, define light source 0 position in World Space
	GLfloat light_position[] = { 0.0f, 10.0f, 0.0f, 1.0f };
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
}

//=======================================================================
// Material Configuration Function
//======================================================================
void InitMaterial()
{
	// Enable Material Tracking
	glEnable(GL_COLOR_MATERIAL);

	// Sich will be assigneet Material Properties whd by glColor
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

	// Set Material's Specular Color
	// Will be applied to all objects
	GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	glMaterialfv(GL_FRONT, GL_SPECULAR, specular);

	// Set Material's Shine value (0->128)
	GLfloat shininess[] = { 96.0f };
	glMaterialfv(GL_FRONT, GL_SHININESS, shininess);
}

//=======================================================================
// OpengGL Configuration Function
//=======================================================================
void myInit(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	gluPerspective(fovy, aspectRatio, zNear, zFar);
	//*******************************************************************************************//
	// fovy:			Angle between the bottom and top of the projectors, in degrees.			 //
	// aspectRatio:		Ratio of width to height of the clipping plane.							 //
	// zNear and zFar:	Specify the front and back clipping planes distances from camera.		 //
	//*******************************************************************************************//

	glMatrixMode(GL_MODELVIEW);

	glLoadIdentity();
	/*
	gluLookAt(Eye.x, Eye.y, Eye.z, At.x, At.y, At.z, Up.x, Up.y, Up.z);
	*/
	//*******************************************************************************************//
	// EYE (ex, ey, ez): defines the location of the camera.									 //
	// AT (ax, ay, az):	 denotes the direction where the camera is aiming at.					 //
	// UP (ux, uy, uz):  denotes the upward orientation of the camera.							 //
	//*******************************************************************************************//

	InitLightSource();

	InitMaterial();

	glEnable(GL_DEPTH_TEST);

	glEnable(GL_NORMALIZE);
}

//=======================================================================
// Render Ground Function
//=======================================================================
void RenderGround()
{
	glDisable(GL_LIGHTING);	// Disable lighting 

	glColor3f(0.6, 0.6, 0.6);	// Dim the ground texture a bit

	glEnable(GL_TEXTURE_2D);	// Enable 2D texturing

	glBindTexture(GL_TEXTURE_2D, tex_ground.texture[0]);	// Bind the ground texture

	glPushMatrix();
	glBegin(GL_QUADS);
	glNormal3f(0, 1, 0);	// Set quad normal direction.
	glTexCoord2f(0, 0);		// Set tex coordinates ( Using (0,0) -> (5,5) with texture wrapping set to GL_REPEAT to simulate the ground repeated grass texture).
	glVertex3f(-20, 0, -20);
	glTexCoord2f(5, 0);
	glVertex3f(20, 0, -20);
	glTexCoord2f(5, 5);
	glVertex3f(20, 0, 20);
	glTexCoord2f(0, 5);
	glVertex3f(-20, 0, 20);
	glEnd();
	glPopMatrix();

	glEnable(GL_LIGHTING);	// Enable lighting again for other entites coming throung the pipeline.

	glColor3f(1, 1, 1);	// Set material back to white instead of grey used for the ground texture.
}

void RenderGround2()
{
	glDisable(GL_LIGHTING);	// Disable lighting 

	glColor3f(0.6, 0.6, 0.6);	// Dim the ground texture a bit

	glEnable(GL_TEXTURE_2D);	// Enable 2D texturing

	glBindTexture(GL_TEXTURE_2D, tex_ground2.texture[0]);	// Bind the ground texture

	glPushMatrix();
	glBegin(GL_QUADS);
	glNormal3f(0, 1, 0);	// Set quad normal direction.
	glTexCoord2f(0, 0);		// Set tex coordinates ( Using (0,0) -> (5,5) with texture wrapping set to GL_REPEAT to simulate the ground repeated grass texture).
	glVertex3f(-20, 0, -20);
	glTexCoord2f(5, 0);
	glVertex3f(20, 0, -20);
	glTexCoord2f(5, 5);
	glVertex3f(20, 0, 20);
	glTexCoord2f(0, 5);
	glVertex3f(-20, 0, 20);
	glEnd();
	glPopMatrix();

	glEnable(GL_LIGHTING);	// Enable lighting again for other entites coming throung the pipeline.

	glColor3f(1, 1, 1);	// Set material back to white instead of grey used for the ground texture.
}


void drawCollectibles(float collectiblesX, float collectiblesZ, int check) {

	switch (check)
	{
		//std::cout << check;
	case 1:
		//std::cout << check;
		if (collectable1 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable1 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable1 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}
		}
		break;
	case 2:
		if (collectable2 == true) {
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable2 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable2 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}

		}
		break;
	case 3:
		if (collectable3 == true) {
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable3 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable3 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}
		}
		break;
	case 4:
		if (collectable4 == true) {
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable4 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable4 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}
		}
		break;
	case 5:
		if (collectable5 == true) {
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable5 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable5 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}
		}
		break;
	case 6:
		if (collectable6 == true) {
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ);
			glScaled(0.3, 0.3, 0.3);
			glRotated(collectiblesRot, 0, 1, 0);
			model_treasure.Draw();
			glPopMatrix();
			collectable6 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ - 0.5, collectiblesZ + 0.5);
			if (collectable6 == 0) {
				score += 10;
				PlaySound(TEXT("treasure.wav"), NULL, SND_ASYNC);
			}
			//collectable6 = !collide;
		}
		break;

	case 7:
		if (collectable7 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable7 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable7 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable7 = !collide;
		}
		break;
	case 8:
		if (collectable8 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable8 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable8 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable8 = !collide;
		}
		break;

	case 9:
		if (collectable9 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable9 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable9 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable9 = !collide;
		}
		break;

	case 10:
		if (collectable10 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable10 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable10 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable10 = !collide;
		}
		break;

	case 11:
		if (collectable11 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable11 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable11 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable11 = !collide;
		}
		break;

	case 12:
		if (collectable12 == true) {
			//	std::cout << "Treasuuuree6";
			glPushMatrix();
			glTranslated(collectiblesX, 0, collectiblesZ + 80);
			glScaled(0.015, 0.015, 0.015);
			glRotated(collectiblesRot, 0, 1, 0);
			model_ball.Draw();
			glPopMatrix();
			collectable12 = !Collision(collectiblesX - 1.5, collectiblesX + 1.5, collectiblesZ + 80 - 0.5, collectiblesZ + 80 + 0.5);
			if (collectable12 == 0) {
				score += 10;
				PlaySound(TEXT("ball.wav"), NULL, SND_ASYNC);
			}
			//collectable12 = !collide;
		}
		break;

	default:
		break;
	}


}

void drawObstacleSea(float x, float z, int check) {


	switch (check)
	{
		//std::cout << check;
	case 1:
		//std::cout << check;
		if (obstacleSea1 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, -0.3, z);
			glRotatef(180.f, 0, 1, 0);
			glScalef(0.13, 0.13, 0.13);
			model_shark.Draw();
			glPopMatrix();
			obstacleSea1 = !Collision(x - 1.5, x + 1.5, z + 3.5, z + 8);
			if (obstacleSea1 == 0) {
				lives--;
				PlaySound(TEXT("shark.wav"), NULL, SND_ASYNC);
			}

		}
		break;

	case 2:
		//std::cout << check;
		if (obstacleSea2 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, -0.3, z);
			glRotatef(180.f, 0, 1, 0);
			glScalef(0.13, 0.13, 0.13);
			model_shark.Draw();
			glPopMatrix();
			obstacleSea2 = !Collision(x - 1.5, x + 1.5, z + 3.5, z + 8);
			if (obstacleSea2 == 0 && power1 == 1) {
				lives--;
				PlaySound(TEXT("shark.wav"), NULL, SND_ASYNC);

			}
			else if (obstacleSea2 == 0 && power1 == 0) {
				obstacleSea2 = 1;
			}

			//collectable1 = 1;
			//std::cout << collide;
			//std::cout << !collide;
			//score += 10;
			//collectable1 = !collide;
			//std::cout << collectable1;
		}
		break;

	case 3:
		//std::cout << check;
		if (obstacleSea3 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, -0.3, z);
			glRotatef(180.f, 0, 1, 0);
			glScalef(0.13, 0.13, 0.13);
			model_shark.Draw();
			glPopMatrix();
			obstacleSea3 = !Collision(x - 1.5, x + 1.5, z + 3.5, z + 8);
			if (obstacleSea3 == 0 && power2 == 1) {
				lives--;
				PlaySound(TEXT("shark.wav"), NULL, SND_ASYNC);
				//obstacleSea3 == 1;
			}

			else if (obstacleSea3 == 0 && power2 == 0) {
				obstacleSea3 = 1;
			}
			//collectable1 = 1;
			//std::cout << collide;
			//std::cout << !collide;
			//score += 10;
			//collectable1 = !collide;
			//std::cout << collectable1;
		}
		break;

	default:
		break;



	}
	/*glPushMatrix();
	glTranslated(x, -0.3, z);
	glRotatef(180.f, 0, 1, 0);
	glScalef(0.13, 0.13, 0.13);
	model_shark.Draw();
	glPopMatrix();*/
}

void drawObstacleLand(float x, float z, int check) {


	switch (check)
	{
		//std::cout << check;
	case 1:
		//std::cout << check;
		if (obstacleLand1 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, 0.5, z);
			glScalef(12, 12, 12);
			glRotated(collectiblesRot, 0, 1, 0);
			model_brick.Draw();
			glPopMatrix();
			obstacleLand1 = !Collision(x - 1.5, x + 1.5, z - 0.5, z + 0.5);
			//std::cout << playerZ << "  ";
			if (obstacleLand1 == 0 && power3 == 1) {
				lives--;
				PlaySound(TEXT("urchin.wav"), NULL, SND_ASYNC);

			}
			else if (obstacleLand1 == 0 && power3 == 0) {
				obstacleLand1 = 1;
			}
			//collectable1 = 1;
			//std::cout << collide;
			//std::cout << !collide;
			//score += 10;
			//collectable1 = !collide;
			//std::cout << collectable1;
		}
		break;

	case 2:
		//std::cout << check;
		if (obstacleLand2 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, 0.5, z);
			glScalef(12, 12, 12);
			glRotated(collectiblesRot, 0, 1, 0);
			model_brick.Draw();
			glPopMatrix();
			obstacleLand2 = !Collision(x - 1.5, x + 1.5, z - 0.5, z + 0.5);
			if (obstacleLand2 == 0 && power4 == 1) {
				lives--;
				PlaySound(TEXT("urchin.wav"), NULL, SND_ASYNC);
				obstacleLand2 == 1;
			}

			else if (obstacleLand2 == 0 && power4 == 0) {
				obstacleLand2 = 1;
			}
			//collectable1 = 1;
			//std::cout << collide;
			//std::cout << !collide;
			//score += 10;
			//collectable1 = !collide;
			//std::cout << collectable1;
		}
		break;

	case 3:
		//std::cout << check;
		if (obstacleLand3 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(x, 0.5, z);
			glScalef(12, 12, 12);
			glRotated(collectiblesRot, 0, 1, 0);
			model_brick.Draw();
			glPopMatrix();
			obstacleLand3 = !Collision(x - 1.5, x + 1.5, z - 0.5, z + 0.5);
			if (obstacleLand3 == 0) {
				lives--;
				PlaySound(TEXT("urchin.wav"), NULL, SND_ASYNC);
			}


			//collectable1 = 1;
			//std::cout << collide;
			//std::cout << !collide;
			//score += 10;
			//collectable1 = !collide;
			//std::cout << collectable1;
		}
		break;

	default:
		break;
	}



	/*glPushMatrix();
	glTranslated(x, 0.5, z);
	glScalef(12, 12, 12);
	model_brick.Draw();
	glPopMatrix();*/
}

void drawPowerUp(float powerUpX, float powerUpZ, int check) {


	switch (check)
	{
		//std::cout << check;
	case 1:
		//std::cout << check;
		if (power1 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(powerUpX, 0, powerUpZ);
			glScaled(100, 100, 100);
			glRotated(collectiblesRot, 0, 1, 0);
			model_fish.Draw();
			glPopMatrix();
			power1 = !Collision(powerUpX - 1.5, powerUpX + 1.5, powerUpZ - 0.5, powerUpZ + 0.5);
			if (power1 == 0) {
				PlaySound(TEXT("collision.wav"), NULL, SND_ASYNC);
			}


			//std::cout << power1;
		}
		break;

	case 2:
		//std::cout << check;
		if (power2 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(powerUpX, 0, powerUpZ);
			glScaled(100, 100, 100);
			glRotated(collectiblesRot, 0, 1, 0);
			model_fish.Draw();
			glPopMatrix();
			power2 = !Collision(powerUpX - 1.5, powerUpX + 1.5, powerUpZ - 0.5, powerUpZ + 0.5);
			if (power2 == 0) {
				PlaySound(TEXT("collision.wav"), NULL, SND_ASYNC);
			}

			//std::cout << power1;
		}
		break;

	case 3:
		//std::cout << check;
		if (power3 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(powerUpX, 0, powerUpZ + 80);
			glScaled(0.2, 0.2, 0.2);
			glTranslated(0, 2, 0);
			glRotated(collectiblesRot, 0, 1, 0);
			model_apple.Draw();
			//glClearColor(0, 0, 0, 0);
			glPopMatrix();
			power3 = !Collision(powerUpX - 1.5, powerUpX + 1.5, powerUpZ + 80 - 0.5, powerUpZ + 80 + 0.5);
			if (power3 == 0) {
				PlaySound(TEXT("collision.wav"), NULL, SND_ASYNC);
			}

			//std::cout << power3;
		}
		break;

	case 4:
		//std::cout << check;
		if (power4 == 1) {
			//std::cout << "Treasuuureee1";
			glPushMatrix();
			glTranslated(powerUpX, 0, powerUpZ + 80);
			glScaled(0.2, 0.2, 0.2);
			glTranslated(0, 2, 0);
			glRotated(collectiblesRot, 0, 1, 0);
			model_apple.Draw();
			//glClearColor(0, 0, 0, 0);
			glPopMatrix();
			power4 = !Collision(powerUpX - 1.5, powerUpX + 1.5, powerUpZ + 80 - 0.5, powerUpZ + 80 + 0.5);
			if (power4 == 0) {
				PlaySound(TEXT("collision.wav"), NULL, SND_ASYNC);
			}

			//std::cout << power1;
		}
		break;
	default:
		break;
	}

}

//dareen
void lighting() {
	if (level1End) {
		GLfloat lightPosition1[] = { 5.00f , lightHeight , 5.00f, 0.00f };
		GLfloat light_Ka1[] = { lightIntensity , lightIntensity , lightIntensity , lightIntensity };
		GLfloat light_Kd1[] = { 0.0f , 0.0f , 0.0f , 0.00f };
		GLfloat light_Ks1[] = { 0.00f , 0.00f , 0.00f , 0.00f };

		GLfloat material_Ka1[] = { 0.13f , 0.06f , 0.11f , 1.00f };
		GLfloat material_Kd1[] = { 0.00f , 0.47f , 0.54f , 1.00f };
		GLfloat material_Ks1[] = { 0.33f , 0.33f , 0.52f , 1.00f };
		GLfloat material_Ke1[] = { 0.00f , 0.00f , 0.00f , 0.00f };
		GLfloat material_se1 = 10;


		glLightfv(GL_LIGHT1, GL_POSITION, lightPosition1);
		glLightfv(GL_LIGHT1, GL_AMBIENT, light_Ka1);
		//glLightfv(GL_LIGHT1, GL_DIFFUSE, light_Kd1);
		//glLightfv(GL_LIGHT1, GL_SPECULAR, light_Ks1);


		glMaterialfv(GL_FRONT, GL_AMBIENT, material_Ka1);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, material_Kd1);
		glMaterialfv(GL_FRONT, GL_SPECULAR, material_Ks1);
		glMaterialfv(GL_FRONT, GL_EMISSION, material_Ke1);
		//glMaterialfv(GL_FRONT, GL_SHININESS, material_se1 );

	}
	else {
		GLfloat lightPosition[] = { 5.00f , lightHeight , 5.00f, 0.00f };
		GLfloat light_Ka[] = { lightIntensity , lightIntensity , lightIntensity , lightIntensity };
		GLfloat light_Kd[] = { 1.00f , 1.00f , 1.00f , 1.00f };
		GLfloat light_Ks[] = { 1.00f , 1.00f , 1.00f , 1.00f };

		GLfloat material_Ka[] = { 1.00f , 0.00f , 0.00f , 0.00f };
		GLfloat material_Kd[] = { 1.00f , 0.00f , 0.00f , 0.00f };
		GLfloat material_Ks[] = { 0.48f , 0.33f , 0.52f , 1.00f };
		GLfloat material_Ke[] = { 1.00f , 1.00f , 0.04f , 0.00f };
		GLfloat material_se = 10;

		glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
		glLightfv(GL_LIGHT0, GL_AMBIENT, light_Ka);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, light_Kd);
		glLightfv(GL_LIGHT0, GL_SPECULAR, light_Ks);

		//glMaterialfv(GL_FRONT, GL_AMBIENT, material_Ka);
		//glMaterialfv(GL_FRONT, GL_DIFFUSE, material_Kd);
		//glMaterialfv(GL_FRONT, GL_SPECULAR, material_Ks);
		//glMaterialfv(GL_FRONT, GL_EMISSION, material_Ke);
		//glMaterialfv(GL_FRONT, GL_SHININESS, material_se );

	}
}

void print(int x, int y, char* s) {


	glDisable(GL_TEXTURE_2D); //added this
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	gluOrtho2D(0.0, WIDTH, 0.0, HEIGHT);
	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();

	int len, i;

	glRasterPos2i(x, y);

	len = (int)strlen(s);

	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, s[i]);
	}


	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
	glMatrixMode(GL_MODELVIEW);
	glPopMatrix();
	//added this
	glEnable(GL_TEXTURE_2D);


}

void ScreenText() {

	//std::cout << player2Z << " player2Z ";



	if (player2Z > 160) {
		glClearColor(0, 0.0, 0.0, 0.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glColor3f(1, 0, 0);
		print(WIDTH / 2 - 60, HEIGHT / 2, "You win =)");
	}

	if (won && player2Z > 160) {
		PlaySound(TEXT("win.wav"), NULL, SND_ASYNC);
		won = 0;
	}

	if (lives == 0) {
		PlaySound(TEXT("lose.wav"), NULL, SND_ASYNC);
		lives -= 1;
	}
	if (lives <= 0 || lost) {
		lost = true;
		glClearColor(0, 0.0, 0.0, 0.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glColor3f(1, 0, 0);

		print(WIDTH / 2 - 60, HEIGHT / 2, "Game Over x_x");
	}
	else {
		if (level1End) {
			glColor3f(0, 0, 0);
			print(WIDTH / 2 - 60, HEIGHT - 30, "Level 2");

		}
		if (!level1End) {
			glColor3f(0, 0, 0);
			print(WIDTH / 2 - 60, HEIGHT - 30, "Level 1");
		}
		else {
			glColor3f(1, 0, 0);
		}

		char* p0s[20];
		sprintf((char*)p0s, "Lives : %d ", lives);
		print(WIDTH - 130, HEIGHT - 40, (char*)p0s);

		sprintf((char*)p0s, "Score : %d ", score);
		print(WIDTH - 130, HEIGHT - 70, (char*)p0s);
	}
}

//=======================================================================
// Display Function
//=======================================================================
void myDisplay(void)
{
	setupCamera();

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);



	//sun
	glPushMatrix();
	glTranslated(12, sunHeight, playerZ + 15);
	glColor3f(1, 0.9, 0);
	glutSolidSphere(3, 15, 15);
	lighting();

	glPopMatrix();

	//dareen
	//moon
	glPushMatrix();
	if (player2Z > 80) {
		glTranslated(12, moonHeight, player2Z + 15);
		glColor3f(0, 0.1, 0.5);
		glutSolidSphere(3, 15, 15);
		lighting();
	}
	glPopMatrix();


	//bool obstacleSea1 = true;
	//bool obstacleSea2 = true;
	//bool obstacleSea3 = true;
	//bool obstacleLand1 = true;
	//bool obstacleLand2 = true;
	//bool obstacleLand3 = true;

	//if (power1 == 0) {
	//	obstacleSea2 = 0;
	//}
	//if (power2 == 0) {
	//	obstacleSea3 = 0;
	//}
	//if (power3 == 0) {
	//	obstacleSea2 = 0;
	//}
	//if (power4 == 0) {
	//	obstacleSea2 = 0;
	//}


	// Draw Ground sea
	glPushMatrix();
	glTranslated(0, 0, 0);
	glScaled(0.5, 0.5, 4);
	RenderGround();
	glPopMatrix();

	// Draw Ground sand
	glPushMatrix();
	glTranslated(0, 0, 100 + 80);
	glScaled(0.5, 0.5, 5);
	RenderGround2();
	glPopMatrix();



	// Draw ariel Model
	if (playerZ < 79) {
		glPushMatrix();
		glTranslated(playerX, 1, playerZ);
		glScaled(0.04, 0.04, 0.04);
		model_ariel.Draw();
		glPopMatrix();
	}

	// Draw blackWidow Model
	if (player2Z > 82) {

		glPushMatrix();
		glTranslated(playerX, 0, player2Z);
		glScaled(0.18, 0.18, 0.18);
		model_blackWidow.Draw();
		glPopMatrix();
	}

	// Draw house Model
	glPushMatrix();
	glTranslated(0, 0, 179);
	glRotatef(90.f, 1, 0, 0);
	glRotatef(180.f, 0, 0, 1);
	glScaled(2, 2, 2);
	model_house.Draw();
	glPopMatrix();


	drawCollectibles(-4, 15, 1);
	drawCollectibles(3, 25, 2);
	drawCollectibles(-1, 35, 3);
	drawCollectibles(3, 45, 4);
	drawCollectibles(-2, 55, 5);
	drawCollectibles(1, 65, 6);

	drawCollectibles(-4, 15, 7);
	drawCollectibles(3, 25, 8);
	drawCollectibles(-1, 35, 9);
	drawCollectibles(3, 45, 10);
	drawCollectibles(-2, 55, 11);
	drawCollectibles(1, 65, 12);

	drawPowerUp(4, 20, 1);
	drawPowerUp(-3, 40, 2);

	drawPowerUp(4, 20, 3);
	drawPowerUp(-3, 33, 4);

	// Draw Sharks (sea obstacles)
	glPushMatrix();
	drawObstacleSea(1.5, 8, 1);
	drawObstacleSea(0, 24, 2);
	drawObstacleSea(-1.5, 40, 3);
	glPopMatrix();


	// Draw Urchins (land obstacles)
	glPushMatrix();
	drawObstacleLand(0, 24 + 80, 1);
	drawObstacleLand(-1.5, 40 + 80, 2);
	drawObstacleLand(1.5, 50 + 80, 3);
	glPopMatrix();

	// Draw Boat (end of level lel sea)
	glPushMatrix();
	glTranslated(0.0, 2, 80);
	glRotatef(90.f, 1, 0, 0);
	glRotatef(-90.f, 0, 0, 1);
	glScalef(0.065, 0.065, 0.065);
	//glcolor3f(1,0,0);
	model_boat.Draw();
	//std::cout << playerZ<<" level ";
	//std::cout << player2Z << " final ";

	glPopMatrix();


	//sky box
	glPushMatrix();

	GLUquadricObj* qobj;
	qobj = gluNewQuadric();
	glTranslated(50, 0, 0);
	glRotated(90, 1, 0, 1);
	glBindTexture(GL_TEXTURE_2D, tex);
	gluQuadricTexture(qobj, true);
	gluQuadricNormals(qobj, GL_SMOOTH);
	gluSphere(qobj, 100, 100, 100);
	gluDeleteQuadric(qobj);


	glPopMatrix();

	glPushMatrix();

	GLUquadricObj* qobj2;
	qobj2 = gluNewQuadric();
	glTranslated(0, 0, 80);
	glRotated(90, 1, 0, 1);
	glBindTexture(GL_TEXTURE_2D, tex);
	gluQuadricTexture(qobj2, true);
	gluQuadricNormals(qobj2, GL_SMOOTH);
	gluSphere(qobj2, 100, 100, 100);
	gluDeleteQuadric(qobj2);

	glPopMatrix();


	glPushMatrix();
	ScreenText();
	glPopMatrix();

	glutSwapBuffers();
}

//=======================================================================
// Keyboard Function
//=======================================================================
void myKeyboard(unsigned char button, int x, int y) {
	//float d = 0.01;
	//float a = 1.0;

	/*
	 switch (button)
	{
	case 'w':
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		break;
	case 'r':
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
		break;
	case 27:
		exit(0);
		break;
	case 't':
		camera.moveY(d);
		break;
	case 'g':
		camera.moveY(-d);
		break;
	case 'f':
		camera.moveX(d);
		break;
	case 'h':
		camera.moveX(-d);
		break;*/
		//case 'q':
		//    camera.moveZ(d);
		//    break;
		//case 'e':
		//    camera.moveZ(-d);
		//    break;
		//case 'z':
		//    camera.lookFront();
		//    break;
		//case 'x':
		//    camera.lookTop();
		//    break;
		//case 'c':
		//    camera.lookSide();
		//    break;
		//default:
		//    break;
		//}

		//std::cout << camera.eye.x << std::endl;
		//std::cout << camera.center.x << std::endl;
	if (button == '1' && playerX < 8) {
		playerX += 0.1;
		//playerZ += 0.05;
	}
	if (button == '3' && playerX > -8) {
		playerX -= 0.1;
		//playerZ += 0.05;
	}

	if (button == '1' && playerX < 8) {
		//std::cout << "right" << std::endl;
		camera.eye.x += 0.1;
		camera.center.x += 0.1;

		//dareen
		camera1Person.eye.x += 0.1;
		camera1Person.center.x += 0.1;

		//camera.eye.z += 0.15;
		//camera.center.z += 0.15;
	}
	if (button == '3' && playerX > -8) {
		//std::cout << "left" << std::endl;
		camera.eye.x -= 0.1;
		camera.center.x -= 0.1;

		//dareen
		camera1Person.eye.x -= 0.1;
		camera1Person.center.x -= 0.1;

		//camera.eye.z += 0.15;
		//camera.center.z += 0.15;
	}
	//if (button == '3' && playerX < -8 && rightBorder == false) {
	//    std::cout << "right border" << std::endl;
	//    camera.eye.z = 1;
	//    camera.center.z = 0;
	//    rightBorder = true;
	//}
	//glLoadIdentity();
	//camera.look();
	//glutPostRedisplay();
}


//=======================================================================
// Motion Function
//=======================================================================
//void myMotion(int x, int y)
//{
//	y = HEIGHT - y;
//	/*
//	if (cameraZoom - y > 0)
//	{
//		Eye.x += -0.1;
//		Eye.z += -0.1;
//	}
//	else
//	{
//		Eye.x += 0.1;
//		Eye.z += 0.1;
//	}
//	*/
//	cameraZoom = y;
//
//	glLoadIdentity();	//Clear Model_View Matrix
//	/*
//	gluLookAt(Eye.x, Eye.y, Eye.z, At.x, At.y, At.z, Up.x, Up.y, Up.z);	//Setup Camera with modified paramters
//	*/
//
//	GLfloat light_position[] = { 0.0f, 10.0f, 0.0f, 1.0f };
//	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
//
//	glutPostRedisplay();	//Re-draw scene 
//}

//=======================================================================
// Mouse Function
//=======================================================================

//dareeen
void myMouse(int button, int state, int x, int y) {

	if (state == GLUT_DOWN) {
		std::cout << "" << std::endl;
		std::cout << "CLICKEDDDDD" << std::endl;
		cameraNormal = !cameraNormal;
		//done = 0;
	}
}


void timer(int) {

	collectiblesRot += 10;

	glutPostRedisplay();
	glutTimerFunc(100, timer, 0);
	//camera.moveZ(-0.2);

	lightIntensity = lightIntensity - 0.0026;
	if (lightIntensity < 0) {
		lightIntensity = 0;
	}
	lightHeight = lightHeight - 0.05;
	if (lightHeight < -5) {
		lightHeight = -5;
	}
	sunHeight = sunHeight - 0.015;
	if (level1End == 1) {
		moonHeight = moonHeight - 0.015;
	}
	std::cout << playerZ << "PlayerZ";

	//if (playerZ == 92.3998) {
	//		//level1End = true;
	//	PlaySound(TEXT("level2.wav"), NULL, SND_ASYNC);
	//}
	if (playerZ >= 80) {
		level1End = true;
		//PlaySound(TEXT("level2.wav"), NULL, SND_ASYNC);
	}

	if (level1End == 0) {
		playerZ += 0.2;
	}

	if (level1End == 1 && dont == true) {
		PlaySound(TEXT("level2.wav"), NULL, SND_ASYNC);
		lives = 3;
		player2Z += 0.2;
		dont = false;
		lightHeight = 5;
		lightIntensity = 0;
	}
	if (dont == false) {
		player2Z += 0.2;
	}

}

//=======================================================================
// Reshape Function
//=======================================================================
//void myReshape(int w, int h)
//{
//	if (h == 0) {
//		h = 1;
//	}
//
//	WIDTH = w;
//	HEIGHT = h;
//
//	// set the drawable region of the window
//	glViewport(0, 0, w, h);
//
//	// set up the projection matrix 
//	glMatrixMode(GL_PROJECTION);
//	glLoadIdentity();
//	gluPerspective(fovy, (GLdouble)WIDTH / (GLdouble)HEIGHT, zNear, zFar);
//
//	// go back to modelview matrix so we can move the objects about
//	glMatrixMode(GL_MODELVIEW);
//	glLoadIdentity();
//	/*
//	gluLookAt(Eye.x, Eye.y, Eye.z, At.x, At.y, At.z, Up.x, Up.y, Up.z);
//	*/
//}

//=======================================================================
// Assets Loading Function
//=======================================================================
void LoadAssets()
{
	// Loading Model files
	model_house.Load("Models/house/house.3DS");
	model_ball.Load("Models/ball/Volleyball.3ds");
	model_brick.Load("Models/brick/sea_urchin_3DS.3ds");
	model_ariel.Load("Models/ariel/ari.3DS");
	model_shark.Load("Models/shark/megaloden 3ds.3DS");
	model_treasure.Load("Models/treasure/chest.3ds");
	model_fish.Load("Models/fish/Fish N310113.3DS");
	model_apple.Load("Models/apple/apple_3ds.3DS");
	model_blackWidow.Load("Models/blackWidow/black.3DS");
	model_boat.Load("Models/boat/boat.3DS");

	// Loading texture files
	//sea
	tex_ground.Load("Textures/ground.bmp");
	//sand
	tex_ground2.Load("Textures/ground2.bmp");
	loadBMP(&tex, "Textures/blu-sky-3.bmp", true);
}

//=======================================================================
// Main Function
//=======================================================================
void main(int argc, char** argv)
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

	glutInitWindowSize(WIDTH, HEIGHT);

	glutInitWindowPosition(100, 150);

	glutCreateWindow(title);

	glutDisplayFunc(myDisplay);

	glutKeyboardFunc(myKeyboard);

	//glutMotionFunc(myMotion);

	//dareen
	glutMouseFunc(myMouse);

	//glutReshapeFunc(myReshape);

	myInit();

	LoadAssets();
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	//dareen
	glEnable(GL_LIGHT1);

	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);

	glutTimerFunc(0, timer, 0);

	glShadeModel(GL_SMOOTH);

	glutMainLoop();
}